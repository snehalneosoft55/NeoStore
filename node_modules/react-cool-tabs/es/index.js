var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import Row from './Row';
import { _tabStyle, _contentContainerStyle, _contentStyle, _activeBorderBottomStyle, _tabsBorderBottomStyle, buttonStyle } from './styles';

var CoolTabs = function (_Component) {
  _inherits(CoolTabs, _Component);

  function CoolTabs(props) {
    _classCallCheck(this, CoolTabs);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.state = {
      tabKey: _this.props.tabKey
    };
    _this.onPressTab = _this.onPressTab.bind(_this);
    return _this;
  }

  CoolTabs.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState, snapshot) {
    if (this.props.tabKey !== prevProps.tabKey) {
      this.setState({ tabKey: this.props.tabKey });
    }
  };

  CoolTabs.prototype.onPressTab = function onPressTab(key) {
    var _this2 = this;

    this.setState({ tabKey: key }, function () {
      _this2.props.onTabChanged && _this2.props.onTabChanged(key);
    });
  };

  CoolTabs.prototype.renderBorderUnderTabs = function renderBorderUnderTabs() {
    var _props = this.props,
        tabsBorderBottomStyle = _props.tabsBorderBottomStyle,
        tabsBorderBottomClassName = _props.tabsBorderBottomClassName;

    return React.createElement('div', { style: _extends({}, _tabsBorderBottomStyle, tabsBorderBottomStyle), className: tabsBorderBottomClassName });
  };

  CoolTabs.prototype.renderActiveTabBorder = function renderActiveTabBorder() {
    var tabKey = this.state.tabKey;
    var _props2 = this.props,
        activeLeftTabBorderBottomClassName = _props2.activeLeftTabBorderBottomClassName,
        activeRightTabBorderBottomClassName = _props2.activeRightTabBorderBottomClassName,
        activeLeftTabBorderBottomStyle = _props2.activeLeftTabBorderBottomStyle,
        activeRightTabBorderBottomStyle = _props2.activeRightTabBorderBottomStyle,
        borderTransitionStyle = _props2.borderTransitionStyle;

    var _transformBorder1 = tabKey === '1' && { transform: 'translateX(0px)' };
    var _transformBorder2 = tabKey === '2' && { transform: 'translateX(100%)' };
    switch (tabKey) {
      case '1':
        return React.createElement('div', {
          style: _extends({}, _activeBorderBottomStyle, _transformBorder1, {
            transition: borderTransitionStyle
          }, activeLeftTabBorderBottomStyle),
          className: activeLeftTabBorderBottomClassName });
      case '2':
        return React.createElement('div', {
          style: _extends({}, _activeBorderBottomStyle, _transformBorder2, {
            transition: borderTransitionStyle
          }, activeRightTabBorderBottomStyle),
          className: activeRightTabBorderBottomClassName });
      default:
        break;
    }
  };

  CoolTabs.prototype.render = function render() {
    var _this3 = this;

    var tabKey = this.state.tabKey;
    var _props3 = this.props,
        className = _props3.className,
        style = _props3.style,
        tabsHeaderStyle = _props3.tabsHeaderStyle,
        tabsHeaderClassName = _props3.tabsHeaderClassName,
        activeTabStyle = _props3.activeTabStyle,
        unActiveTabStyle = _props3.unActiveTabStyle,
        leftTabStyle = _props3.leftTabStyle,
        rightTabStyle = _props3.rightTabStyle,
        activeTabClassName = _props3.activeTabClassName,
        leftTabClassName = _props3.leftTabClassName,
        rightTabClassName = _props3.rightTabClassName,
        unActiveClassName = _props3.unActiveClassName,
        leftTabTitleStyle = _props3.leftTabTitleStyle,
        rightTabTitleStyle = _props3.rightTabTitleStyle,
        leftTabTitleClassName = _props3.leftTabTitleClassName,
        rightTabTitleClassName = _props3.rightTabTitleClassName,
        leftTabTitle = _props3.leftTabTitle,
        rightTabTitle = _props3.rightTabTitle,
        contentContainerStyle = _props3.contentContainerStyle,
        contentContainerClassName = _props3.contentContainerClassName,
        leftContentStyle = _props3.leftContentStyle,
        rightContentStyle = _props3.rightContentStyle,
        leftContent = _props3.leftContent,
        rightContent = _props3.rightContent,
        leftContentClassName = _props3.leftContentClassName,
        rightContentClassName = _props3.rightContentClassName,
        contentTransitionStyle = _props3.contentTransitionStyle;


    var _activeTab1 = tabKey === '1' ? activeTabStyle : unActiveTabStyle;
    var _activeTab2 = tabKey === '2' ? activeTabStyle : unActiveTabStyle;
    var _transformContent1 = tabKey === '1' ? null : { transform: 'translateX(100%)' };
    var _transformContent2 = tabKey === '2' ? null : { transform: 'translateX(-100%)' };

    return React.createElement(
      'div',
      { className: className, style: _extends({ height: 400, width: 400 }, style) },
      React.createElement(
        Row,
        { style: _extends({ height: 40, position: 'relative' }, tabsHeaderStyle), className: tabsHeaderClassName },
        React.createElement(
          'button',
          { style: _extends({}, buttonStyle, _tabStyle, leftTabStyle, _activeTab1), className: leftTabClassName + ' ' + (tabKey === '1' ? '' + activeTabClassName : unActiveClassName),
            onClick: function onClick() {
              return _this3.onPressTab('1');
            } },
          React.createElement(
            'div',
            { style: leftTabTitleStyle, className: leftTabTitleClassName },
            leftTabTitle
          )
        ),
        React.createElement(
          'button',
          { style: _extends({}, buttonStyle, _tabStyle, rightTabStyle, _activeTab2), className: rightTabClassName + ' ' + (tabKey === '2' ? '' + activeTabClassName : unActiveClassName),
            onClick: function onClick() {
              return _this3.onPressTab('2');
            } },
          React.createElement(
            'div',
            { style: rightTabTitleStyle, className: rightTabTitleClassName },
            rightTabTitle
          )
        ),
        this.renderBorderUnderTabs(),
        this.renderActiveTabBorder()
      ),
      React.createElement(
        'div',
        { style: _extends({}, _contentContainerStyle, contentContainerStyle), className: contentContainerClassName },
        React.createElement(
          'div',
          { style: _extends({}, _contentStyle, _transformContent1, leftContentStyle, {
              transition: contentTransitionStyle
            }), className: '' + leftContentClassName },
          leftContent
        ),
        React.createElement(
          'div',
          { style: _extends({}, _contentStyle, _transformContent2, rightContentStyle, {
              transition: contentTransitionStyle
            }), className: '' + rightContentClassName },
          rightContent
        )
      )
    );
  };

  return CoolTabs;
}(Component);

export default CoolTabs;

CoolTabs.defaultProps = {
  leftTabTitle: 'Tab 1',
  rightTabTitle: 'Tab 2',
  leftContent: 'Content 1',
  rightContent: 'Content 2',
  tabKey: '1'
  // contentTransitionStyle: 'transform 1s ease',
  // borderTransitionStyle: 'all 1s ease',
};

// eslint-disable-next-line no-lone-blocks
{/* <CoolTabs
  style={{ marginTop: 43, width: 550, height: 600 }}
  className={'cool-tabs'}
  firstTabTitle={(<IntlMessages id={'trade.deposit'} />)}
  secondTabTitle={(<IntlMessages id={'trade.withdraw'} />)}
  titleUpperCase
  firstTabClassName={'firstTab'}
  secondTabClassName={'secondTab'}
  unActiveClassName={'tabOff'}
  firstTabBorderClassName={'deposit-border'}
  secondTabBorderClassName={'withdraw-border'}
  firstContent={<TradeForm method={'buy'} />}
  secondContent={<TradeForm method={'sell'} />}
  transitionTypeClassName={'transition'}
  /> */}